// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: teacher.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const addTeacherStudent = `-- name: AddTeacherStudent :exec
INSERT INTO teachers (
    teacher,
    student 
) VALUES (
    $1, $2
)
`

type AddTeacherStudentParams struct {
	Teacher string `json:"teacher"`
	Student string `json:"student"`
}

func (q *Queries) AddTeacherStudent(ctx context.Context, arg AddTeacherStudentParams) error {
	_, err := q.db.ExecContext(ctx, addTeacherStudent, arg.Teacher, arg.Student)
	return err
}

const getTeacherStudents = `-- name: GetTeacherStudents :many
SELECT student
FROM teachers
WHERE teacher = $1
`

func (q *Queries) GetTeacherStudents(ctx context.Context, teacher string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getTeacherStudents, teacher)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var student string
		if err := rows.Scan(&student); err != nil {
			return nil, err
		}
		items = append(items, student)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeachersStudents = `-- name: GetTeachersStudents :many

SELECT student
FROM teachers
WHERE teacher = ANY($1::text[])
GROUP BY student
HAVING COUNT(DISTINCT teacher) = (
    SELECT COUNT(DISTINCT t) FROM UNNEST($1::text[]) AS t
)
`

func (q *Queries) GetTeachersStudents(ctx context.Context, dollar_1 []string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getTeachersStudents, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var student string
		if err := rows.Scan(&student); err != nil {
			return nil, err
		}
		items = append(items, student)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
